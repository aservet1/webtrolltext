{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","placeholder","trollify","txt","trim","toLowerCase","split","map","c","Math","random","toUpperCase","join","state","className","onChange","event","setState","text","target","value","onClick","trolledText","this","navigator","clipboard","writeText","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA+DeA,E,kDAxDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAHRC,YAAc,iBAEK,EAQnBC,SAAW,SAACC,GACV,OACEA,EACGC,OACEC,cACEC,MAAM,IACJC,KACC,SAACC,GAAD,OACGC,KAAKC,SAAW,GACfF,EAAEG,cACFH,KAEPI,KAAK,KAlBd,EAAKC,MAAQ,CACX,KAAQ,GACR,YAAe,EAAKZ,aAJL,E,0CAwBnB,WAAU,IAAD,OACP,OAEE,aAFQ,CAER,OAAKa,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,gEACA,8BAAK,uBAAOC,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAACC,KAAMF,EAAMG,OAAOC,aAEnE,8BAAK,wBAAQC,QAAU,kBAAM,EAAKJ,SAAS,CAAEK,YAAa,EAAKpB,SAAS,EAAKW,MAAMK,SAA9E,SACV,2CAGK,oCAAmC,KAA3BK,KAAKV,MAAMS,YAAsBC,KAAKV,MAAMS,YAAcC,KAAKtB,YAAvE,OAEN,8BAAK,wBAAQoB,QAAU,kBAAMG,UAAUC,UAAUC,UAAU,EAAKb,MAAMS,cAAjE,SACK,8B,GA3CIK,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6d0837ff.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nclass App extends React.Component {\n\n  placeholder = '______________' // TODO: make this a box to put the text in instead\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      'text': '',\n      'trolledText': this.placeholder\n    }\n  }\n\n  trollify = (txt) => {\n    return (\n      txt\n        .trim()\n          .toLowerCase()\n            .split('')\n              .map (\n                (c) =>\n                  (Math.random() < .5)\n                  ? c.toUpperCase()\n                  : c\n              )\n            .join('')\n    );\n  }\n\n  render() {\n    return (  //TODO modularize the text data away from the JSX im writing\n              //TODO make a CSS class for the submit buttons\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p> Enter text to trollify below: </p>\n          <div><input onChange={(event) => this.setState({text: event.target.value})}/></div>\n\n          <div><button onClick={ () => this.setState({ trolledText: this.trollify(this.state.text) }) } >\n\t\t\t\t{\"Submit (click again for new version)\"}\n\t\t  </button></div>\n          \n          <div> {(this.state.trolledText !== '') ? this.state.trolledText : this.placeholder} </div>\n\n\t\t  <div><button onClick={ () => navigator.clipboard.writeText(this.state.trolledText) } >\n            \t{\"Copy This Text\"}\n          </button></div>\n\n          {/*<a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>*/}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}