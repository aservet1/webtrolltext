{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Button","props","id","onClick","text","App","placeholder","trollify","txt","trim","toLowerCase","split","map","c","Math","random","toUpperCase","join","copyToClipboard","navigator","clipboard","writeText","getTrolledText","submitText","setState","trolledText","state","handleTextboxTyping","e","target","value","prompt","this","className","onChange","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAGA,SAASA,EAAOC,GACd,OACE,wBACEC,GAAID,EAAMC,GACVC,QAASF,EAAME,QAFjB,SAIGF,EAAMG,O,IAoGEC,E,kDA3Fb,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IAHRK,YAAc,MAEK,EASnBC,SAAW,SAACC,GACV,OACEA,EACGC,OACEC,cACEC,MAAM,IACJC,KACC,SAACC,GAAD,OACGC,KAAKC,SAAW,GACfF,EAAEG,cACFH,KAEPI,KAAK,KArBG,EA+BnBC,gBAAkB,WAChBC,UAAUC,UAAUC,UAClB,EAAKC,mBAjCU,EAqCnBC,WAAa,WACX,EAAKC,SAAS,CACZC,YAAa,EAAKlB,SAChB,EAAKmB,MAAMtB,SAxCE,EA6CnBuB,oBAAsB,SAACC,GACrB,EAAKJ,SAAS,CACZpB,KAAMwB,EAAEC,OAAOC,SA7CjB,EAAKJ,MAAQ,CACX,KAAQ,GACR,YAAe,EAAKpB,aAEtB,EAAKyB,OAAL,wBAA+B,EAAKxB,SAAS,aAN5B,E,kDAyBnB,WACE,MAAmC,KAA3ByB,KAAKN,MAAMD,YACfO,KAAKN,MAAMD,YACXO,KAAK1B,c,oBAuBX,WACE,OACE,sBAAK2B,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,4DAKF,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,8BAAID,KAAKD,OAAT,OACA,0BAEEG,SAAUF,KAAKL,sBAEjB,cAAC3B,EAAD,CACEI,KAAO,SACPD,QAAW6B,KAAKT,gBAIpB,qBAAKU,UAAU,iBAAf,SACE,gCACE,cAACjC,EAAD,CACEI,KAAO,iBACPD,QAAW6B,KAAKd,kBAElB,8BACGc,KAAKV,2BAKd,wBAAQW,UAAU,sB,GAzFRE,IAAMC,WCFTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c4baa5f7.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nfunction Button(props) {\n  return (\n    <button\n      id={props.id}\n      onClick={props.onClick}\n    >\n      {props.text}\n    </button>\n  );\n}\n\nclass App extends React.Component {\n\n  placeholder = '...';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      'text': '',\n      'trolledText': this.placeholder\n    };\n    this.prompt = `enter text to ${this.trollify(\"trollify\")}`;\n  }\n\n  trollify = (txt) => {\n    return (\n      txt\n        .trim()\n          .toLowerCase()\n            .split('')\n              .map (\n                (c) =>\n                  (Math.random() < .5)\n                  ? c.toUpperCase()\n                  : c\n              )\n            .join('')\n    );\n  }\n\n  getTrolledText() {\n    return (this.state.trolledText !== '')\n      ? this.state.trolledText\n      : this.placeholder;\n  }\n\n  copyToClipboard = () => {\n    navigator.clipboard.writeText(\n      this.getTrolledText()\n    );\n  }\n\n  submitText = () => {\n    this.setState({\n      trolledText: this.trollify(\n        this.state.text\n      )\n    });\n  }\n\n  handleTextboxTyping = (e) => {\n    this.setState({\n      text: e.target.value\n    });\n  }\n\n  render() {\n    return (      \n      <div className=\"App\">\n        <div className=\"App-header\">\n          <header>\n            troll text generator\n          </header>\n        </div>\n        \n        <div className=\"App-body\">\n          <div className=\"input-section\">\n            <p>{this.prompt}:</p>\n            <textarea\n              \n              onChange={this.handleTextboxTyping}\n            />\n            <Button\n              text = \"submit\"\n              onClick = {this.submitText}\n            />\n          </div>\n\n          <div className=\"output-section\">\n            <div>\n              <Button\n                text = \"copy this Text\"\n                onClick = {this.copyToClipboard}\n              />\n              <div>\n                {this.getTrolledText()}\n              </div>\n            </div>\n          </div>\n        </div>\n        <footer className=\"App-footer\"/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}